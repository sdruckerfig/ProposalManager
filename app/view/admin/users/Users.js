/*
 * File: app/view/admin/users/Users.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProposalManager.view.admin.users.Users', {
    extend: 'Ext.window.Window',
    alias: 'widget.adminusers',

    requires: [
        'ProposalManager.view.admin.users.UsersViewModel',
        'ProposalManager.view.admin.users.UsersViewController',
        'Ext.grid.Panel',
        'Ext.grid.filters.filter.String',
        'Ext.form.field.ComboBox',
        'Ext.grid.filters.filter.List',
        'Ext.view.Table',
        'Ext.grid.plugin.RowEditing',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.TextItem',
        'Ext.grid.filters.Filters',
        'Ext.grid.column.Action',
        'Ext.panel.Tool'
    ],

    controller: 'adminusersusers',
    viewModel: {
        type: 'adminusersusers'
    },
    autoShow: true,
    height: 250,
    width: 600,
    layout: 'fit',
    title: 'Edit Users',
    modal: true,

    items: [
        {
            xtype: 'gridpanel',
            reference: 'grid',
            header: false,
            title: '',
            bind: {
                selection: '{selectedRecord}',
                store: '{Users}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'username',
                    text: 'Username',
                    editor: {
                        xtype: 'textfield',
                        allowBlank: false
                    },
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'email',
                    text: 'E-Mail',
                    flex: 1,
                    editor: {
                        xtype: 'textfield',
                        allowBlank: false
                    },
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return record.get('companyname');
                    },
                    dataIndex: 'idcompany',
                    text: 'Company',
                    flex: 1,
                    editor: {
                        xtype: 'combobox',
                        allowBlank: false,
                        displayField: 'companyname',
                        forceSelection: true,
                        store: 'Companies',
                        valueField: 'id',
                        listeners: {
                            change: 'onCompanyIdChange'
                        }
                    },
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return record.get('role');
                    },
                    width: 100,
                    dataIndex: 'idrole',
                    text: 'Role',
                    flex: 1,
                    editor: {
                        xtype: 'combobox',
                        allowBlank: false,
                        forceSelection: true,
                        queryMode: 'local',
                        store: 'Roles',
                        valueField: 'id',
                        listeners: {
                            change: 'onRoleIdChange'
                        }
                    },
                    filter: {
                        type: 'list',
                        options: [
                            'User',
                            'Admin',
                            'SuperAdmin'
                        ]
                    }
                },
                {
                    xtype: 'actioncolumn',
                    width: 25,
                    hideable: false,
                    menuDisabled: true,
                    items: [
                        {
                            handler: 'onSendPasswordReminder',
                            icon: 'resources/images/mail_information.png',
                            tooltip: 'Email Login Info'
                        }
                    ]
                }
            ],
            plugins: [
                {
                    ptype: 'rowediting',
                    pluginId: 'editor',
                    listeners: {
                        canceledit: 'onRowEditingCancelEdit',
                        edit: 'onRowEditingEdit'
                    }
                },
                {
                    ptype: 'gridfilters'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    reference: 'statusToolbar',
                    items: [
                        {
                            xtype: 'tbtext',
                            flex: 1,
                            height: 20,
                            bind: {
                                html: '{recordStatus}'
                            }
                        }
                    ]
                }
            ]
        }
    ],
    tools: [
        {
            xtype: 'tool',
            callback: 'onAddRecord',
            tooltip: 'Add Company',
            type: 'plus'
        },
        {
            xtype: 'tool',
            tooltip: 'Delete Company',
            type: 'minus',
            bind: {
                disabled: '{!selectedRecord}'
            },
            listeners: {
                click: 'onDeleteRecord'
            }
        },
        {
            xtype: 'tool',
            type: 'refresh',
            listeners: {
                click: 'onRefresh'
            }
        }
    ],
    listeners: {
        beforerender: 'onWindowBeforeRender',
        close: 'onWindowClose'
    }

});