/*
 * File: app/view/asset/SearchFormViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProposalManager.view.asset.SearchFormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.searchform',

    onFilterChange: function() {
        var view = this.getView();
        var fields = view.getValues();
        var filters = [];

        // handle input fields

        if (!Ext.isEmpty(fields.idClient) && fields.idClient > 0) {
           filters.push({
                   property: 'idclient',
                   value: fields.idClient
            });
        }

        if (!Ext.isEmpty(fields.idAssetType) && fields.idAssetType > 0) {
            filters.push({
                   property: 'idassettype',
                   value: fields.idAssetType
            });
        }

        if (!Ext.isEmpty(fields.searchtext)) {
            filters.push({
                property: 'searchterm',
                value: fields.searchtext
            });
        }

        // get checked nodes from tree

        var checkedNodes = this.lookupReference('taxonomytree').getChecked();
        var treeNodeIds=Ext.Array.pluck(checkedNodes,"id");
        if (treeNodeIds.length) {
            filters.push({
                property: 'taxonomyterms',
                value: treeNodeIds.join(',')
            });
        }

        // Apply filters

        var s = this.getViewModel().getStore('ProposalAssets');
        if (filters.length > 0) {
            s.clearFilter(true);
            s.filter(filters);
        } else {
            s.clearFilter(true);
            s.load();
        }


    },

    onAssetTypeSelect: function(field, newValue, oldValue, eOpts) {
        var assetbrowser  = field.up('assetbrowser');
        assetbrowser.getController().reconfigureGrid(newValue);
        this.onFilterChange();
    },

    onIdClientChange: function(field, newValue, oldValue, eOpts) {
        this.onFilterChange();
    },

    onSearchTermChange: function(field, newValue, oldValue, eOpts) {
        this.onFilterChange();
    },

    onTaxonomyCheckChange: function(node, checked, eOpts) {
        this.onFilterChange();
    },

    onClearFilters: function(button, e) {
        this.getView().reset(); // reset form
        // clear checked boxes
        var tree = this.lookupReference('taxonomytree');
        var checkedNodes = tree.getChecked();
        for (var i=0; i<checkedNodes.length; i++) {
            checkedNodes[i].set('checked',false);
        }
        this.onFilterChange();
    }

});
