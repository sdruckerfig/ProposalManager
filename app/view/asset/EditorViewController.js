/*
 * File: app/view/asset/EditorViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProposalManager.view.asset.EditorViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.asseteditor',

    onSave: function(b, e) {
        var me = this;
        // save metadata
        // var rec = this.getViewModel().get('selectedRecord');
        var form = me.lookupReference('theform');
        form.updateRecord();
        var rec = form.getRecord();

        // get taxonomy
        var checked = this.lookupReference('taxonomy').getChecked();
        rec.set('taxonomy', Ext.Array.pluck(checked,"id").join(','));

        rec.save({
            useCredentials: true,
            success: function(response,req) {
                var response = Ext.decode(req.getResponse().responseText);
                rec.set('id',response.id);
                rec.commit();
                Ext.toast("Record Saved","Save Complete");
                var v = me.getView();
                v.fireEvent('aftersave',v,rec);
                v.close();

            },
            failure: function(response,req) {
                Ext.Msg.alert("Transaction Failure","Please try again later");
            }
        });
    },

    onAssetTypeChange: function(field, newValue, oldValue, eOpts) {
        if (newValue === 1 || newValue == 3) {
            this.lookupReference('idClient').show();
            this.lookupReference('datedue').show();
        } else {
            this.lookupReference('idClient').hide();
            this.lookupReference('datedue').hide();
        }

        if (newValue === 1) {
            this.lookupReference('bWin').show();
        } else {
            this.lookupReference('bWin').hide();
        }
    },

    onTabbarBeforeRender: function(component, eOpts) {
        component.add([
        {
            xtype: 'tbfill'
        },
        {
            xtype: 'button',
            text: 'Save',
            formBind: true,
            width: 100,
            handler: 'onSave',
            margin: '5 0 5 0'
        }
        ]);
    },

    onWindowAfterRender: function(component, eOpts) {
        if (component.getAssetId() == 0) {

            // create new rcord
            this.lookupReference('theform').loadRecord(Ext.create('ProposalManager.model.ProposalAsset'));

        } else {

            // load record from web service

            ProposalManager.model.ProposalAsset.load(component.getAssetId(), {

                scope: this,

                failure: function(record, operation) {
                    //do something if the load failed
                    Ext.Msg.alert("Failure","Failed to retrieve record");
                },

                success: function(record, operation) {

                    // populate idclient box
                    var s = this.lookupReference('idClient').getStore();
                    if (!s.getById(record.get('idclient'))) {
                        s.add({
                            id: record.get('idclient'),
                            clientname: record.get('clientname')
                        });
                    }

                    //transfer data from the record into the form fields
                    this.lookupReference('theform').loadRecord(record);

                }
            });
        }

        // load taxonomy from server, pre-selecting checked records
        this.getViewModel().getStore('Taxonomy').load({
            params: {
                assetId: component.getAssetId()
            }
        });
    },

    onWindowClose: function(panel, eOpts) {
        this.redirectTo('main');
    }

});
